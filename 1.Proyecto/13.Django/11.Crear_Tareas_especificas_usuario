###############################################################################################################
###############################################################################################################
                        Archivo views.py
* En el método que lista las tareas correspondientes para cada usuario, editamos la función 'get_context_data'
  indicando que el contexto filtre las tareas dependiendo en este caso el usuario registrado. Asimismo, muestra
  con el método count unicamente las tareas filtradas que no esten completadas, que este con completo=False

* En el método crear tarea editamos la función 'form_valid' para que cuando una tarea sea creada, los datos
  enviados en el formulario de la tarea, sea asignado al usuario logueado. Asimismo, en el campo Fields tanto
  para el método 'CrearTarea' como para 'EditarTarea', indicamos que campos queremos que se vea en el formula-
  rio, en este caso => fields = ['titulo', 'descripcion', 'completo'], quitando la selección de usuario porque
  ya se asigna automáticamente con la configuración anterior en 'CrearTarea'.
##############################################################################################################
##############################################################################################################

from django.shortcuts import render
from django.views.generic.list import ListView
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.contrib.auth.views import LoginView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy

from .models import Tarea


class ListaPendientes(LoginRequiredMixin, ListView):
    model = Tarea
    template_name = 'tarea_list.html'  # Reemplaza 'tarea_list.html' con la plantilla que deseas usar para mostrar los datos
    context_object_name = 'tareas'  # Nombre del objeto de contexto en la plantilla (opcional) => hace referencia a la tabla o modelo (alias)
    queryset = Tarea.objects.all()  # Define el conjunto de consultas que deseas mostrar

    def get_context_data(self, **kwargs):
        context=super().get_context_data(**kwargs)
        context['tareas']=context['tareas'].filter(usuario=self.request.user)
        context['count'] = context['tareas'].filter(completo=False).count()
        return context


class CrearTarea(LoginRequiredMixin, CreateView):
    model = Tarea
    template_name = 'base/tarea_form.html'
    #fields='__all__'  #Incorpora todos los campos del modelo
    fields=['titulo','descripcion','completo']
    success_url = reverse_lazy('tareas')

    def form_valid(self,form):
        form.instance.usuario=self.request.user
        return super(CrearTarea, self).form_valid(form)

class EditarTarea(LoginRequiredMixin, UpdateView):
    model = Tarea
    #fields = '__all__'  # Incorpora todos los campos del modelo
    fields = ['titulo', 'descripcion', 'completo']
    success_url = reverse_lazy('tareas')
